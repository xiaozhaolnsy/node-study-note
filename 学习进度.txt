Day1 2020-07-18 浏览文档
========================
12:00 浏览文档1-3章（Node简介、模块机制、异步IO）

	初识Node
	->	Node是一个支持事件驱动、异步、非阻塞IO的单线程服务端JS平台，
		其目的在于提供性能好能并发且便捷开发轻量级WEB环境。
	------------------------------------------------------------------------
	感觉抽象、准备接下来用一小时浏览下4-5章后再进行规划。

15:30 浏览文档4、5章（异步编程、内存控制）

	1、什么是事件驱动？
	Node是一个单线程的语言，采用事件驱动和异步回调的机制。
	事件驱动的实质是通过主循环加事件触发的方式来运行程序。
	Tick:每次循环的过程。每次Tick（观察者）查看是否有事件待处理
		->有，取出事件和相关回调。
		->回调的实现。
	2、Node优势：基于事件驱动的非阻塞IO模型（资源利用更好）
	   Node难点：异常处理->约定回调函数第一个参数为异常（空则无）
	3、GC->原理和JVM复制算法相似
	4、闭包->实现外部作用域访问内部作用域的方法叫闭包。

17:00 学习菜鸟教程 https://www.runoob.com/nodejs/nodejs-tutorial.html
	代码path:./study-code/step[1..x].js
	
	step1 创建服务器 1)require("http") 2)createServer
	step2 NPM：Node随同包管理工具
	step3 REPL：交互式解释器
	step4 回调函数(比较阻塞与非阻塞->异步调用后向下进行直到回调)
			->一般作为函数最后一个参数、回调函数接收错误对象作为第一个参数
20:00
	step5 事件循环
			->Node几乎每一个 API 都是支持回调函数的。
			->Node基本所有事件机制都是用设计模式中观察者模式实现。
			->events模块、eventEmitter对象、
		step6 EventEmitter类
				->.emit()触发事件
				->.on()绑定事件
	step7 Buffer
			->js只有String型，没有binary型
			->流必须用binary，Buffer随Node内核发布，使Node能处理bin
	step8 Stream
			->四种类型Readable、Writable、Duplex、Transform
			->所有Stream对象都是EventEmitter实例
				->常用事件data(read)、end、error、finish(write)
	step9 Moudle
			->exports、require
	step10 Function
			->Function be a parameter.
			->Anonymous Funcion.
	
	比较重要
	step11 Router:如何将router整合进server
									url.parse(string).query
			url.parse(string).pathname      |
						|                   |
						------ -------------------
	http://localhost:8888/start?foo=bar&hello=world
								------- -----------
								|           |
	querystring.parse(queryString)["foo"]	|
											|
							querystring.parse(queryString)["hello"]
	step12 全局对象
			->__filename、dirname
			->setTimeout(cb,ms)、clearTimeout(t)、setInteval(cb,ms)
			->console
			->process
	step13 常用工具 util
			-> .callbackify();async异步函数转换为遵循异常优先的回调风格函数
			-> .inherits();继承，不能继承构造器中属性或函数
			-> .inspect(); 将任意对象转换为字符串 ->类似Java中的.toString();
			-> .isArray()、.isRegExp()、.isDate()
	step14 文件系统
			-> fs.readFile(,fn(){})异步读 回调
			-> fs.readFileSync();同步读
----------------------------------------------------------------------------
Day1End 大概了解了node的写法，和一些常用的函数。计划明天开始学习web。

Day2 2020-07-19 了解web
========================
	10:00 
	step15 GET/POST
			->Get: get在url参数中，使用url.parse方法解析
			->Post:请求内容在请求体中，Node默认不解析（等待请求体传输耗时）
				->req绑定end事件，回调进行解析
				->解析判断有无postbody
					->有 打印
					->无 追加表单
	step16 工具模块 用到再看 os、path、net、dns、domain
	step17 Web模块
		1、什么是Web服务器？-> 3个主流Web服务器Apache、Nginx、IIS。
		驻留于网上的程序，支持HTTP、HTML、URL，提供Web信息浏览服务
		2、req和res的处理
	------------------------------------------------------------------------
	大概习惯了node的回调方式，了解了Web模型，接下来开始学习Express。

	14:00
	step18 Express
		-> 安装express及中间件
				-> npm install express --save 
				-> npm install body-parser --save    --> 处理JSON,Raw,Text,URL
				-> npm install cookie-parser --save  --> 解析Cookie的工具
				-> npm install multer --save		 --> enctype="multipart/form-data"
		-> 第一个Express实例 step18_1.js
				-> Express 应用使用回调函数的参数 request 和 response 对象来处理请求和响应的数据
		-> 路由 step18_2.js
				-> 路由决定由谁(指定脚本)响应客户端请求
				app.get('/',fn(){});
		-> 中间件 express.static 提供静态文件 step18_3.js
				-> app.use('/public', express.static('public'));
							-------					---------
								  |							|
								url path				local path
		-> 路由器处理url参数 step18_4.js GET、POST
				-> body-parser & querystring ( & multer )
		-> (multipart)文件上传 暂不学习
		-> Cookie step18_4.js
	------------------------------------------------------------------------
	    至此，菜鸟教程部分就学习完成了，整理出来了一些基础代码可供使用查看。
	对Express的印象很不错，因为感觉轻量化程度较高。
	晚上再找些教程学习一下Express，同时如果有基础的问题可能还需要看基础教程。

	18:00 
	B站：6分钟学会Express 后端 API 开发 Node.js 2020最新版
	URL:https://www.bilibili.com/video/BV1e54y1D7cS/?spm_id_from=333.788.videocard.6
	
	1、Express是什么？简洁灵活的 Node Web 框架
	2、Express能干什么？ x
		特性：unopinionated 不限制设计模式 MVC、MVP
	3、Express怎么用？（整理于链接教程）
		step1 提供一个项目环境
			-> 初始化一个node项目 -- project-name yarn init -y
				-> yarn ? -- 和npm一样都是包管理工具，弥补npm缺陷（速度更快）
			-> 添加express依赖 -- yarn add express
			-> 新建app.js启动项目
				-> 引入express库 -> 创建express实例 -> 监听端口启动服务
		step2 处理请求
			-> 请求方式、请求路径、回调函数
								  -> send响应Client
			-> 请求格式 json
						-> 添加json中间件 app.use(express.json())
		step3 多API优化 路由
				-> routes文件夹下 新文件a.js 创建Router实例
				-> post处理抽出 放入子路由 a.js
				-> app.js 中引用 a.js
				-> app.use("/r",a)
			-> index.js 统一管理 子路由
				module.exports = (app) => {app.use("/post",a);}
				app.js中引入routes文件夹 调用函数 routes(app);
